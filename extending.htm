<html><!doctype html>

<html lang="en">

<head>
    <title>Laravel 中文文档</title>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1">
    <meta name="author" content="Laravel 中国">
    <meta name="description" content="Laravel 中文文档, 致力于推动 Laravel, php-fig 等国外 PHP 新技术, 新理念在中国的发展.">
    <meta name="keywords" content="laravel中国,laravel中文, laravel框架中文, laravel框架中国, php, framework, web, artisans, taylor otwell">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="shortcut icon" href="favicon.png" tppabs="http://laravel-china.qiniudn.com/favicon.png">

    <link href="styles.css" tppabs="http://laravel-china.qiniudn.com/assets/css/styles.css" rel="stylesheet">

    <!--[if IE]><link href="http://laravel-china.qiniudn.com/assets/css/ie.css" rel="stylesheet" type="text/css"><![endif]-->

    <!-- HTML5 elements in less than IE9, yes please! -->
    <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

    <!-- If less than IE8 add some JS for the webfont icons -->
    <!--[if lt IE 8]><script src="http://laravel-china.qiniudn.com/assets/js/ie_font.js"></script><![endif]-->

        
    
    <style>
#documentation nav#docs ul li ul li a {
font-weight: 600;
font-size: 13px;
}
nav#primary.fixed {
opacity: .9;
 position: inherit; 
top: 0;
}

p {
font-size: inherit;
line-height: 1.4em;
margin: 0 0 .8em;
}
html, body {
height: 100%;
font-size: 14px;
color: #333333;
font-family: "Heiti SC Light", "Helvetica Neue", Verdana, 微软雅黑, Arial, sans-serif;
background: #e5e5e5;
}
#documentation nav#docs {
    width: 250px;
}
code, kbd, pre, samp {
    font-size: inherit;
}
code {
background: #F1F1F1;
color: #f4645f;
padding: 0 5px;
border-radius: 3px;
}
p {
line-height: 1.8em;
}
#documentation nav#docs {
width: 170px;
}

@media only screen and (min-width: 1024px) {
#documentation #docs-content {
display: block;
float: right;
padding-left: 35px;
padding-right: 35px;
width: 830px;
}
}

.primary-nav-ul li a {
border-bottom: 0;
font-size: 14px;
padding: 0 0 0 25px;
width: auto;
}
.prettyprint code {
font-family: Monaco,Consolas,"Lucida Console",monospace;
font-size: 13px;
}
    </style>
</head>

<body id="index" class="page">

    <!--[if lt IE 7]>
        <p>Your browser is <em>ancient!</em> <a href="http://browsehappy.com/">Upgrade to a different browser</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to experience this site.</p>
    <![endif]-->

    <div id="wrapper">

    <header id="header" role="header">
    <div class="boxed">
        <div id="tagline">
            <h1><a href="index.htm" tppabs="http://laravel-china.org/" style="color:white; font-wight:bold;">Laravel China</a></h1>
        </div>

        <div id="version">
            <ul class="nolist">
                                    <li class="current">
                        <a href="docs.htm" tppabs="http://laravel-china.org/docs/4-2" title="4.2">4.2</a>
                    </li>
                            </ul>
        </div>
    </div>
</header>

<nav id="primary">
    <div class="boxed">
        <div id="logo-head">
            <a href="index.htm" tppabs="http://laravel-china.org/"><img src="logo-head.png" tppabs="http://laravel-china.qiniudn.com/assets/img/logo-head.png" alt="Laravel"></a>
        </div>
        <ul class="primary-nav-ul">
            <li class="current-item"><a href="docs.htm" tppabs="http://laravel-china.org/docs/docs" title="Documentation">文档</a></li>
            <li><a href="javascript:if(confirm('http://phphub.org/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://phphub.org/'" tppabs="http://phphub.org/" title="PHPhub"  target="_blank">论坛</a></li>
            <li><a href="javascript:if(confirm('https://github.com/laravel-china/docs  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ ��һ��ַʹ����δ֧�ֵ�Э�� (���磬gopher)��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='https://github.com/laravel-china/docs'" tppabs="https://github.com/laravel-china/docs"  target="_blank">纠错</a></li>
            <li><a href="javascript:if(confirm('http://laravel.com/api/4.2/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://laravel.com/api/4.2/'" tppabs="http://laravel.com/api/4.2/" title="Laravel Framework API"  target="_blank">API</a></li>
        </ul>
        <a href="#" class="show-primary-nav">菜单</a>
    </div>
</nav>

<div id="content">

    <section id="documentation">
        <article class="boxed">

            <ul class="version-picker--mobile nolist">
                                <li class="current">
                    <a href="docs.htm" tppabs="http://laravel-china.org/docs/4-2" title="4.2">4.2</a>
                </li>
                            </ul>
            <a href="#" class="docs-show" data-show-text="Navigate" data-hide-text="Close">Navigate</a>

            <nav id="docs">
                <ul>
<li>前言

<ul>
<li><a href="introduction.htm" tppabs="http://laravel-china.org/docs/introduction">Laravel 介绍</a></li>
<li><a href="quick.htm" tppabs="http://laravel-china.org/docs/quick">快速入门</a></li>
<li><a href="releases.htm" tppabs="http://laravel-china.org/docs/releases">框架更新记录</a></li>
<li><a href="upgrade.htm" tppabs="http://laravel-china.org/docs/upgrade">升级指南</a></li>
</ul></li>
<li>快速上手

<ul>
<li><a href="installation.htm" tppabs="http://laravel-china.org/docs/installation">安装文档</a></li>
<li><a href="configuration.htm" tppabs="http://laravel-china.org/docs/configuration">配置信息</a></li>
<li><a href="homestead.htm" tppabs="http://laravel-china.org/docs/homestead">Homestead</a></li>
<li><a href="lifecycle.htm" tppabs="http://laravel-china.org/docs/lifecycle">程序的生命周期</a></li>
<li><a href="routing.htm" tppabs="http://laravel-china.org/docs/routing">路由 Routing</a></li>
<li><a href="requests.htm" tppabs="http://laravel-china.org/docs/requests">处理用户请求和输入</a></li>
<li><a href="responses.htm" tppabs="http://laravel-china.org/docs/responses">视图和响应</a></li>
<li><a href="controllers.htm" tppabs="http://laravel-china.org/docs/controllers">控制器</a></li>
<li><a href="errors.htm" tppabs="http://laravel-china.org/docs/errors">错误和日志</a></li>
</ul></li>
<li>更多 Laravel 知识

<ul>
<li><a href="security.htm" tppabs="http://laravel-china.org/docs/security">身份认证功能</a></li>
<li><a href="billing.htm" tppabs="http://laravel-china.org/docs/billing">收费系统</a></li>
<li><a href="cache.htm" tppabs="http://laravel-china.org/docs/cache">缓存</a></li>
<li><a href="extending.htm" tppabs="http://laravel-china.org/docs/extending">扩展框架</a></li>
<li><a href="events.htm" tppabs="http://laravel-china.org/docs/events">事件</a></li>
<li><a href="facades.htm" tppabs="http://laravel-china.org/docs/facades">Facades</a></li>
<li><a href="html.htm" tppabs="http://laravel-china.org/docs/html">表单和HTML</a></li>
<li><a href="helpers.htm" tppabs="http://laravel-china.org/docs/helpers">帮助函数</a></li>
<li><a href="ioc.htm" tppabs="http://laravel-china.org/docs/ioc">IoC Container</a></li>
<li><a href="localization.htm" tppabs="http://laravel-china.org/docs/localization">本地化</a></li>
<li><a href="mail.htm" tppabs="http://laravel-china.org/docs/mail">邮件发送 Mail</a></li>
<li><a href="packages.htm" tppabs="http://laravel-china.org/docs/packages">扩展包开发</a></li>
<li><a href="pagination.htm" tppabs="http://laravel-china.org/docs/pagination">分页功能</a></li>
<li><a href="queues.htm" tppabs="http://laravel-china.org/docs/queues">队列</a></li>
<li><a href="security.htm" tppabs="http://laravel-china.org/docs/security">安全</a></li>
<li><a href="session.htm" tppabs="http://laravel-china.org/docs/session">会话</a></li>
<li><a href="ssh.htm" tppabs="http://laravel-china.org/docs/ssh">远程连接模块 SSH</a></li>
<li><a href="templates.htm" tppabs="http://laravel-china.org/docs/templates">模版引擎</a></li>
<li><a href="testing.htm" tppabs="http://laravel-china.org/docs/testing">单元测试</a></li>
<li><a href="validation.htm" tppabs="http://laravel-china.org/docs/validation">表单验证</a></li>
</ul></li>
<li>数据库 Database

<ul>
<li><a href="database.htm" tppabs="http://laravel-china.org/docs/database">数据库简单使用</a></li>
<li><a href="queries.htm" tppabs="http://laravel-china.org/docs/queries">查询构造器</a></li>
<li><a href="eloquent.htm" tppabs="http://laravel-china.org/docs/eloquent">Eloquent ORM</a></li>
<li><a href="schema.htm" tppabs="http://laravel-china.org/docs/schema">表结构构造器</a></li>
<li><a href="migrations.htm" tppabs="http://laravel-china.org/docs/migrations">Migrations &amp; Seeding</a></li>
<li><a href="redis.htm" tppabs="http://laravel-china.org/docs/redis">Redis</a></li>
</ul></li>
<li>命令行 Artisan CLI

<ul>
<li><a href="artisan.htm" tppabs="http://laravel-china.org/docs/artisan">命令行 Artisan 介绍</a></li>
<li><a href="commands.htm" tppabs="http://laravel-china.org/docs/commands">开发 Artisan 命令</a></li>
</ul></li>
</ul>
            </nav>

            <div id="docs-content">
                <h1>扩展框架</h1>

<ul>
<li><a href="#introduction">介绍</a></li>
<li><a href="#managers-and-factories">管理者和工厂</a></li>
<li><a href="#where-to-extend">在哪里扩展</a></li>
<li><a href="#cache">缓存</a></li>
<li><a href="#session">Session</a></li>
<li><a href="#authentication">认证</a></li>
<li><a href="#ioc-based-extension">基于 IoC 的扩展</a></li>
<li><a href="#request-extension">扩展请求</a></li>
</ul>

<p><a name="introduction"></a></p>

<h2>介绍</h2>

<p>Laravel 提供许多可扩展的地方让您自定义框架核心组件的行为，或甚至完全地取代它们。 例如，<code>HasherInterface</code> 接口定义了哈希工具，您可以基于应用程序的需求来实现它。 您也可以扩展 <code>Request</code> 对象，让您加入自己的便利 "辅助" 方法。 甚至您可以加入全新的认证、缓存和 session 驱动！</p>

<p>Laravel 组件一般以两种方式来扩展： 在 IoC 容器里绑定新的实现，或用 "工厂" 设计模式实现的 <code>Manager</code> 类来注册扩展。 在这个章节我们将会探索多种扩展框架的方法和查看必要的代码。</p>

<blockquote>
  <p><strong>备注:</strong> 记住， Laravel 组件通常用两种方法的其中之一来扩展： IoC 绑定和 <code>Manager</code> 类。 管理者类作为 "工厂" 设计模式的实现，并负责实体化基于驱动的工具，例如：缓存和 session。</p>
</blockquote>

<p><a name="managers-and-factories"></a></p>

<h2>管理者和工厂</h2>

<p>Laravel 有几个 <code>Manager</code> 类用来管理建立基于驱动的组件。 这些类包括缓存、session、认证和队列组件。 管理者类负责基于应用程序的设定建立一个特定的驱动实现。 例如， <code>CacheManager</code> 类可以建立 APC、 Memcached 、文件和各种其他的缓存驱动实现.</p>

<p>这些管理者都拥有 <code>extend</code> 方法，它可以简单地用来注入新的驱动解析功能到管理者。 我们将会在下面随着如何注入自定义驱动支持给它们的例子，涵盖这些管理者的内容。</p>

<blockquote>
  <p><strong>备注:</strong> 建议花点时间来探索 Laravel 附带的各种 <code>Manager</code> 类，例如： <code>CacheManager</code> 和 <code>SessionManager</code>。 看过这些类将会让您更彻底了解 Laravel 表面下是如何运作。 所有的管理者类继承 <code>Illuminate\Support\Manager</code> 基底类， 它提供一些有用、常见的功能给每一个管理者。</p>
</blockquote>

<p><a name="where-to-extend"></a></p>

<h2>在哪里扩展</h2>

<p>这份文件涵盖如何扩展各种 Laravel 的组件，但是您可能想知道要在哪里放置您的扩展代码。 就像其他大部分的启动代码，您可以自由的在您的 <code>start</code> 文件放置一些扩展，缓存和认证扩展是这个方法的好例子。 其他扩展，像 <code>Session</code>，必须放置到服务提供者的 <code>register</code> 方法中，因为他们在请求生命周期的非常早期就被需要。</p>

<p><a name="cache"></a></p>

<h2>缓存</h2>

<p>为了扩展 Laravel 缓存工具，我们将会对 <code>CacheManager</code> 使用 <code>extend</code> 方法，它被用来绑定一个自定义驱动解析器到管理者，并且是全部的管理者类通用的。 例如，注册一个新的缓存驱动命名为 "mongo"，我们将执行以下操作：</p>

<pre><code>Cache::extend('mongo', function($app)
{
    // Return Illuminate\Cache\Repository instance...
});
</code></pre>

<p>传递到 <code>extend</code> 方法的第一个参数是驱动的名称。 这将会对应到您的 <code>app/config/cache.php</code> 配置文件里的 <code>driver</code> 选项。 第二个参数是个应该回传 <code>Illuminate\Cache\Repository</code> 实体的闭包。 <code>$app</code> 实体将被传递到闭包，它是 <code>Illuminate\Foundation\Application</code> 和 IoC 容器的实体。</p>

<p>要建立我们的自定义缓存驱动，首先需要实现 <code>Illuminate\Cache\StoreInterface</code> 接口。 所以，我们的 MongoDB 缓存实现将会看起来像这样：</p>

<pre><code>class MongoStore implements Illuminate\Cache\StoreInterface {

    public function get($key) {}
    public function put($key, $value, $minutes) {}
    public function increment($key, $value = 1) {}
    public function decrement($key, $value = 1) {}
    public function forever($key, $value) {}
    public function forget($key) {}
    public function flush() {}

}
</code></pre>

<p>我们只需要使用 MongoDB 连接来实现这些方法。 当我们的实现完成，我们可以完成我们的自定义驱动注册：</p>

<pre><code>use Illuminate\Cache\Repository;

Cache::extend('mongo', function($app)
{
    return new Repository(new MongoStore);
});
</code></pre>

<p>就像您可以在上面的例子看到的，当在建立自定义缓存驱动的时候，您可以使用基本的 <code>Illuminate\Cache\Repository</code> 类。 通常不需要建立您自己的储存库类。</p>

<p>如果您在考虑要把您的自定义缓存驱动代码放在哪里，请考虑把它放上 Packagist！ 或者，您可以在您的应用程序的主要文件夹中建立一个 <code>Extensions</code> 命名空间。 例如，如果应用程序命名为 <code>Snappy</code>，您可以在 <code>app/Snappy/Extensions/MongoStore.php</code> 放置缓存扩展。 然而，必须牢记在心 Laravel 没有严格的应用程序架构，您可以依照喜好自由的组织您的应用程序。</p>

<blockquote>
  <p><strong>备注:</strong> 如果您曾经考虑要在哪放置一段代码，请总是考虑服务提供者。 就像我们曾经讨论过的，用服务提供者来组织框架扩展是个组织您的代码的好方法.</p>
</blockquote>

<p><a name="session"></a></p>

<h2>Session</h2>

<p>以自定义 session 驱动来扩展 Laravel 跟扩展缓存系统一样简单。 再一次的，我们将会使用 <code>extend</code> 方法来注册我们的自定义代码：</p>

<pre><code>Session::extend('mongo', function($app)
{
    // Return implementation of SessionHandlerInterface
});
</code></pre>

<h3>在哪里扩展 Session</h3>

<p>Session 需要用与其他扩展如 Cache 和 Auth 不同地方式扩展。 因为 sessions 在请求生命周期的非常早期就被启用，注册扩展在 <code>start</code> 文件将会太晚。 作为替代，将会需要<a href="ioc.htm#service-providers" tppabs="http://laravel-china.org/docs/ioc#service-providers">服务提供者</a> 。 您应该放置您的 session 扩展代码在您的服务提供者的 <code>register</code> 方法，并且提供者应该被放置在 <code>providers</code> 设定数组里、默认的 <code>Illuminate\Session\SessionServiceProvider</code> <strong>下面</strong>。</p>

<h3>实现 Session 扩展</h3>

<p>要注意我们的自定义缓存驱动应该实现 <code>SessionHandlerInterface</code>。 这个接口在 PHP 5.4+ 核心被引入。 如果您使用 PHP 5.3，Laravel 将会为您定义这个接口，所以您可以向下兼容。 这个接口只包含少数我们需要实现的简单方法。 一个空的 MongoDB 实现将会看起来像这样：</p>

<pre><code>class MongoHandler implements SessionHandlerInterface {

    public function open($savePath, $sessionName) {}
    public function close() {}
    public function read($sessionId) {}
    public function write($sessionId, $data) {}
    public function destroy($sessionId) {}
    public function gc($lifetime) {}

}
</code></pre>

<p>因为这些方法不像缓存 <code>StoreInterface</code> 一样容易理解，让我们快速地看过这些方法做些什么：</p>

<ul>
<li><code>open</code> 方法通常会被用在基于文件的 session 储存系统。 因为 Laravel 附带一个 <code>file</code> session 驱动，您几乎不需要在这个方法放任何东西。 您可以让它留空。 PHP 要求我们去实现这个方法，事实上明显的是个差劲的接口设计 (我们将会晚点讨论它)。</li>
<li><code>close</code> 方法，就像 <code>open</code> 方法，通常也可以忽略。 对大部份的驱动来说，并不需要它。</li>
<li><code>read</code> 方法应该回传与给定 <code>$sessionId</code> 关联的 session 数据的字串形态。 当您的驱动取回或储存 session 数据时不需要做任何序列化或进行其他编码，因为 Laravel 将会为您进行序列化。</li>
<li><code>write</code> 方法应该写入给定 <code>$data</code> 字串与 <code>$sessionId</code> 的关联到一些永久存储系统，例如 MongoDB、 Dynamo、等等。</li>
<li><code>destroy</code> 方法应该从永久存储移除与 <code>$sessionId</code> 关联的数据。</li>
<li><code>gc</code> 方法应该销毁所有比给定 <code>$lifetime</code> UNIX 时间戳记还旧的 session 数据。 对于会自己到期的系统如 Memcached 和 Redis，这个方法可以留空。</li>
</ul>

<p>当 <code>SessionHandlerInterface</code> 被实现完成，我们已经准备好用 Session 管理者注册它：</p>

<pre><code>Session::extend('mongo', function($app)
{
    return new MongoHandler;
});
</code></pre>

<p>当 session 驱动已经被注册，我们可以在我们的 <code>app/config/session.php</code> 配置文件使用 <code>mongo</code> 驱动 。</p>

<blockquote>
  <p><strong>备注:</strong> 记住，如果您写了个自定义 session 处理器，请在 Packagist 分享它！</p>
</blockquote>

<p><a name="authentication"></a></p>

<h2>认证</h2>

<p>认证可以通过与缓存和 session 工具相同的方法来扩展。 再一次的，我们将会使用我们已经熟悉的 <code>extend</code> 方法：</p>

<pre><code>Auth::extend('riak', function($app)
{
    // Return implementation of Illuminate\Auth\UserProviderInterface
});
</code></pre>

<p><code>UserProviderInterface</code> 实现只负责从持久化存储中抓取 <code>UserInterface</code> 实现，例如： MySQL、 Riak，等等。 这两个接口让 Laravel 认证机制无论用户数据如何储存或用什么种类的类来代表它都能继续运作。</p>

<p>让我们来看一下 <code>UserProviderInterface</code>：</p>

<pre><code>interface UserProviderInterface {

    public function retrieveById($identifier);
    public function retrieveByToken($identifier, $token);
    public function updateRememberToken(UserInterface $user, $token);
    public function retrieveByCredentials(array $credentials);
    public function validateCredentials(UserInterface $user, array $credentials);

}
</code></pre>

<p><code>retrieveById</code> 函数通常接收一个代表用户的数字键，例如： MySQL 数据库的自动递增 ID。 符合 ID 的 <code>UserInterface</code> 实现应该被取回并被方法回传。</p>

<p><code>retrieveByToken</code> 函数通过用户唯一的 <code>$identifier</code> 和储存在 <code>remember_token</code> 字段的 "记住我" <code>$token</code> 取得用户。 跟前面的方法一样，应该回传 <code>UserInterface</code> 实现。</p>

<p><code>updateRememberToken</code> 方法用新的 <code>$token</code> 更新 <code>$user</code> 的 <code>remember_token</code> 字段。 新 token 的值 可以是在 "记住我" 成功地登入时生成的一个新的 token，或当用户登出时变为 null.</p>

<p><code>retrieveByCredentials</code> 方法接收当尝试登入应用程序时，传递到 <code>Auth::attempt</code> 方法的凭证数组。 这个方法应该接着 "查询" 背后的永久存储，看用户是否符合这些凭证。 这个方法通常会对 <code>$credentials['username']</code> 用 "where" 条件查询。 <strong>这个方法不应该尝试做任何密码验证或认证。</strong></p>

<p><code>validateCredentials</code> 方法应该通过比较给定 <code>$user</code> 与 <code>$credentials</code> 来验证用户。 举例来说，这个方法可以比较 <code>$user-&gt;getAuthPassword()</code> 字串跟 <code>Hash::make</code> 后的 <code>$credentials['password']</code>。</p>

<p>现在我们已经看过 <code>UserProviderInterface</code> 的每个方法，接着我们来看一下 <code>UserInterface</code>。 记住，提供者应该从 <code>retrieveById</code> 和 <code>retrieveByCredentials</code> 方法回传这个接口的实现：</p>

<pre><code>interface UserInterface {

    public function getAuthIdentifier();
    public function getAuthPassword();

}
</code></pre>

<p>这个接口很简单。 <code>getAuthIdentifier</code> 方法应该回传用户的 "主键"。 在 MySQL 后台，同样，这将会是个自动递增的主键。 <code>getAuthPassword</code> 应该回传用户哈希过的密码。 这个接口让认证系统可以与任何用户类一起运作，无论您使用什么 ORM 或储存抽象层。 默认， Laravel 包含一个实现这个接口的 <code>User</code> 类在 <code>app/models</code> 文件夹里，所以您可以参考这个类当作实现的例子。</p>

<p>最后，当我们已经实现了 <code>UserProviderInterface</code>，我们准备好用 <code>Auth</code> facade 来注册我们的扩展：</p>

<pre><code>Auth::extend('riak', function($app)
{
    return new RiakUserProvider($app['riak.connection']);
});
</code></pre>

<p>在您用 <code>extend</code> 方法注册驱动之后，在您的 <code>app/config/auth.php</code> 配置文件切换到新驱动。
<a name="ioc-based-extension"></a></p>

<h2>基于 IoC 的扩展</h2>

<p>几乎每个 Laravel 框架引入的服务提供者会绑定对象到 IoC 容器中。 您可以在 <code>app/config/app.php</code> 配置文件中找到应用程序的服务提供者清单。 当您有时间的时候，您应该浏览一下这里面每一个提供者的源代码。 通过这样做，您将会对每一个提供者为框架增加了什么功能有更多的了解，以及各种服务用什么键来绑定到 IoC 容器。</p>

<p>举个例子， <code>HashServiceProvider</code> 绑定一个 <code>hash</code> 键到 IoC 容器，它将解析成 <code>Illuminate\Hashing\BcryptHasher</code> 实例。 您可以轻松地通过在您的应用程序中重写这个 IoC 绑定，扩展并重写这个类。 例如：</p>

<pre><code>class SnappyHashProvider extends Illuminate\Hashing\HashServiceProvider {

    public function boot()
    {
        App::bindShared('hash', function()
        {
            return new Snappy\Hashing\ScryptHasher;
        });

        parent::boot();
    }

}
</code></pre>

<p>要注意的是这个类扩展 <code>HashServiceProvider</code>，不是默认的 <code>ServiceProvider</code> 基底类。 当您扩展了服务提供者，在您的 <code>app/config/app.php</code> 配置文件把 <code>HashServiceProvider</code> 换成您扩展的提供者名称。</p>

<p>这是扩展任何被绑定在容器的核心类的普遍方法。 实际上，每个被以这种方式绑定在容器的核心类都可以被重写。 再次强调，看过被框架引入的服务提供者将会使您熟悉每个类被绑在容器的哪里，以及它们是用什么键绑定的。 这也是可以了解更多关于 Laravel 是如何结合它们的好方法。</p>

<p><a name="request-extension"></a></p>

<h2>扩展请求</h2>

<p>因为它是框架非常基础的部件并且在请求周期的非常早期就被实例化，扩展 <code>Request</code> 类跟前面的例子有一点不同。</p>

<p>首先，继承 laravel 的 <code>Request</code> 基类：</p>

<pre><code>&lt;?php namespace QuickBill\Extensions;

class Request extends \Illuminate\Http\Request {

    // Custom, helpful methods here...

}
</code></pre>

<p>当您扩展了类，打开 <code>bootstrap/start.php</code> 文件。 这个文件是当应用程序受到请求后非常早被引入的文件之一。 需要注意的是第一个被执行的动作是建立 Laravel <code>$app</code> 实例：</p>

<pre><code>$app = new \Illuminate\Foundation\Application;
</code></pre>

<p>当一个新的应用程序实例被建立，它将会建立一个新的 <code>Illuminate\Http\Request</code> 实例并用 <code>request</code> 键把它绑定到 IoC 容器。 所以，我们需要一个方法去指定一个应该被用作 "默认" 请求类型的自定义类，对吧？ 并且值得庆幸的是，应用程序实例的 <code>requestClass</code> 方法就做了这件事！ 所以，我们可以在 <code>bootstrap/start.php</code> 文件的最上面加这行：</p>

<pre><code>use Illuminate\Foundation\Application;

Application::requestClass('QuickBill\Extensions\Request');
</code></pre>

<p>每当您指定了自定义请求类， Laravel 将会在任何建立 <code>Request</code> 实体的时候使用这个类，便利地让您总是有一个可用的自定义请求类实例，甚至在单元测试也有！</p>
            </div>

        </article>
    </section>

</div>

<footer id="foot" class="textcenter">
    <div class="boxed">

        <nav id="secondary">
            <div id="logo-foot">
                <a href="javascript:if(confirm('http://laravel.com/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://laravel.com/'" tppabs="http://laravel.com/"><img src="logo-foot.png" tppabs="http://laravel-china.qiniudn.com/assets/img/logo-foot.png" alt="Laravel"></a>
            </div>
            <ul>
                <li><a href="javascript:if(confirm('http://laravel.com/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://laravel.com/'" tppabs="http://laravel.com/"  target="_blank">官网</a></li>
                <li><a href="javascript:if(confirm('https://forge.laravel.com/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ ��һ��ַʹ����δ֧�ֵ�Э�� (���磬gopher)��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='https://forge.laravel.com/'" tppabs="https://forge.laravel.com/"  target="_blank">Hosting</a></li>
                <li><a href="javascript:if(confirm('http://laravel.com/docs  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://laravel.com/docs'" tppabs="http://laravel.com/docs" title="Documentation"  target="_blank">英文文档</a></li>
                <li><a href="javascript:if(confirm('http://github.com/laravel/laravel  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://github.com/laravel/laravel'" tppabs="http://github.com/laravel/laravel" title="Github"  target="_blank">Laravel at Github</a></li>
                <li><a href="javascript:if(confirm('http://laravel.io/forum  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://laravel.io/forum'" tppabs="http://laravel.io/forum" title="Laravel Forums"  target="_blank">英文论坛</a></li>
                <li><a href="javascript:if(confirm('http://twitter.com/laravelphp  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://twitter.com/laravelphp'" tppabs="http://twitter.com/laravelphp" title="Laravel on Twitter"  target="_blank">Twitter</a></li>
            </ul>
        </nav>

    </div>
</footer>

<div id="top">
    <a href="#index" title="Back to the top">
        <i class="icon-chevron-up"></i>
    </a>
</div>


    </div>

    <section id="copyright" class="textcenter">
        <div class="boxed">
            <div class="animated slideInLeft">
                Laravel is a trademark of Taylor Otwell.<br class="br-mobile--footer">
                Copyright &copy; <a href="javascript:if(confirm('http://twitter.com/taylorotwell  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://twitter.com/taylorotwell'" tppabs="http://twitter.com/taylorotwell" title="Taylor Otwell" target="_blank">Taylor Otwell</a>.<br class="br-mobile--footer">
                Website built with &hearts; <a href="javascript:if(confirm('http://ikreativ.com/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://ikreativ.com/'" tppabs="http://ikreativ.com/" title="iKreativ" target="_blank">iKreativ</a>;<br class="br-mobile--footer">
                responsive by <a href="javascript:if(confirm('http://tighten.co/  \n\n�ļ���δ�� Teleport Pro ȡ�أ���Ϊ �������·��������ʼ��ַ�����õķ�Χ��  \n\n��Ҫ�ӷ������ϴ�����'))window.location='http://tighten.co/'" tppabs="http://tighten.co/" title="Tighten Co." target="_blank">Tighten Co.</a>
            </div>
        </div>
    </section>

	<script src="bundle.js" tppabs="http://laravel-china.qiniudn.com/assets/js/bundle.js"></script>
    
    

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-1.newrelic.com","licenseKey":"39b5324581","applicationID":"10871142","transactionName":"YFwAZUNVXUBUAkANW1kWN0NYG1pdUQRMSkRfSQ==","queueTime":0,"applicationTime":73,"ttGuid":"","agentToken":"","atts":"TBsDEwtPTk4=","errorBeacon":"bam.nr-data.net","agent":"js-agent.newrelic.com\/nr-476.min.js"}</script></body>
</html>
